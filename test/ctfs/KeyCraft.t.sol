// SPDX-License-Identifier: MIT
pragma solidity 0.8.19;

import {Test} from "forge-std/Test.sol";
import "forge-std/console.sol";
import "../../src/ctfs/KeyCraft.sol";

contract KC is Test {
    KeyCraft k;
    address owner;
    address user;
    address attacker = makeAddr("attacker");

    function setUp() public {
        owner = makeAddr("owner");
        user = makeAddr("user");
        vm.label(attacker, "Attacker");
        vm.deal(user, 1 ether);

        vm.startPrank(owner);
        k = new KeyCraft("KeyCraft", "KC");
        vm.stopPrank();

        vm.startPrank(user);
        k.mint{value: 1 ether}(hex"dead");
        vm.stopPrank();
    }

    function testKeyCraft() public {
        vm.startPrank(attacker);

        // uint160 desiredUint160 = uint160(attacker);
        // uint256 desiredUint256 = uint256(desiredUint160);
        // bytes32 hash = bytes32(desiredUint256);
        // bytes memory b = abi.encodePacked(hash);

        bytes32 a = bytes32(uint256(uint160(uint256(keccak256(abi.encodePacked(attacker))))));
        bytes memory b = new bytes(32);
        for (uint i = 0; i < 32; i++) {
            b[i] = a[i];
        }
        uint newA = uint160(uint256(keccak256(b)));
        console.log("Attacker:",attacker);
        console.log("msg.sender",address(uint160(newA)));
        // uint160 x = 5;
        // address addr = address(x);
        // console.log('addr',addr);

        // console.log(uint160(addr));
        vm.stopPrank();
        // assertEq(attacker.balance, 1 ether);
    }
}
