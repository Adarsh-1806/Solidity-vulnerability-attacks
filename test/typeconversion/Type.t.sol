// SPDX-License-Identifier: MIT
pragma solidity 0.8.19;

import {Test} from "forge-std/Test.sol";
import "forge-std/console.sol";

contract Type {

    function foo() external pure returns(bytes1 b, bytes4 c){
        bytes2 a = 0x1234;
        bytes1 b = bytes1(a);
        bytes4 c = bytes4(a);
        return (b,c);
    }
    function bar() external pure returns(uint8 y, uint32 z){
        uint16 x = 65535;
        uint8 y = uint8(x);
        uint32 z = uint32(x);
        return (y,z);
    }   
}

contract TestType is Test{
    Type addr;
    function setUp() public{
        addr = new Type();
    }

    function testfoo() external view{
        (bytes1 b, bytes4 c) = addr.foo();
        console.logBytes1(b);   //0x12
        console.logBytes4(c);   //0x12340000

    }
    function testbar() external view{
        (uint8 b, uint32 c) = addr.bar();
        console.log(b); //255
        console.log(c); //65535
    }
    function testForUints() external view{
        // int8 y = -3;
        // uint x = uint(y);  //not allowed

        uint16 a = 0x1234;
        uint8 b = uint8(a);
        uint32 c = uint32(a);
        console.log(a); //4660
        console.log(b); //52 == 0x34
        console.log(c); //4660

    }
    function testForUintsandbytes() external view{
        bytes2 a = 0x1234;
        uint32 b = uint16(a); 
        uint32 c = uint32(bytes4(a)); 
        uint8 d = uint8(uint16(a)); 
        uint8 e = uint8(bytes1(a)); 

        console.logBytes2(a);   //0x1234
        console.log(b);         //4660 == 0x1234
        console.log(c);         //305397760 == 0x12340000
        console.log(d);         //52 == 0x34
        console.log(e);         //18 == 0x12


    }
    function testUinttoBytes() view external{
        uint16 a = 65535;
        uint8 b = uint8(a);
        bytes2 c = bytes2(a);

        console.log(a);         //65535
        console.log(b);         //255
        console.logBytes2(c);   //0xffff

    }
}